<div class="top-bar">
  <div class="top-bar-left">
    <ul class="dropdown menu" data-dropdown-menu>
      <li class="menu-text">dbWEBcore</li>
      <li>
        <input onclick="pageSave();" type="button" class="error button" value="SALVA LE MODIFICHE" id="pageSave">
      </li>
      <li>
        <input onclick="pagePreview();" type="button" class="toolbar warning button" value="PREVIEW" id="pagePreview">
      </li>
      <li>
        <input onclick="inlineEdit();" type="button" class="toolbar button" value="INLINE EDIT" id="inlineEdit">
      </li>
      <li>
        <input onclick="layoutDesign();" type="button" class="toolbar button" value="LAYOUT DESIGN" id="layoutDesign">
      </li>
    </ul>
  </div>
  <div class="top-bar-right">
  </div>
</div>

<p id="notice"><%= notice %></p>

<% @page.rows.each do |row| %>
    <div class="<%= "expanded " if row.estesa %>row"<%=
      style = ''
      if row.immagine_sfondo.exists?
        style = "url( #{row.immagine_sfondo.url(:content)} ) no-repeat center top "
      end
      if !row.colore_sfondo.blank?
        style = style + '#' + row.colore_sfondo
      end
      # esperimenti con sfondo sfuocato: va messo in un'immagine sovrapposta allo sfondo
      #if row.immagine_sfondo.exists?
      #  style = style + "; -webkit-filter: blur(100px); -webkit-transform: translate3d(0, 0, 0);"
      #end
      " style='background: #{style}'".html_safe if !style.blank?
      # " style='background: url(/ckeditor_assets/pictures/3/original_13461656733527-0-680x276.jpg) no-repeat center top #005500;'".html_safe if row.estesa
    %>>
      <% row.columns.each do |column| %>
          <div id="editor<%= column.id %>" class="small-<%= column.larghezza %> columns" contenteditable="false">
          <%= column.contenuto.html_safe %>
        </div>
      <% end %>
    </div>
<% end %>

<script>
    // Turn off automatic editor creation first.
    CKEDITOR.disableAutoInline = true;

    // prepara i menù contestuali
    $.contextMenu({
      selector: '.row',
      callback: function(key, options) {
        var m = "clicked: " + key;
        window.console && console.log(m) || alert(m);
      },
      items: {
        "inserisciRigaPrima": {name: "Inserisci riga prima", icon: "edit"},
        "inserisciRigaDopo": {name: "Inserisci riga dopo", icon: "cut"},
        "estendiRiga": {name: "Estendi riga", icon: "copy"},
        "eliminaRiga": {name: "Elimina riga", icon: "delete"},
        "sep1": "---------",
        "inserisciColonnaPrima": {name: "Inserisci colonna prima", icon: "paste"},
        "inserisciColonnaDopo": {name: "Inserisci colonna dopo", icon: "paste"},
        "allargaColonna": {name: "Allarga colonna", icon: "paste"},
        "stringiColonna": {name: "Stringi colonna", icon: "paste"},
        "eliminaColonna": {name: "Elimina colonna", icon: "paste"},
        "sep2": "---------",
        "quit": {name: "Quit", icon: function(){
          return 'context-menu-icon context-menu-icon-quit';
        }}
      }
    });

    // vedere qui come si identifica l'elemento chiamante
    // https://swisnl.github.io/jQuery-contextMenu/demo/on-dom-element.html

    // ...e li disabilita
    $('.row').each(function () {
      var $this = $(this);
      $this.contextMenu(false);
    });

  /*
  $(function() {
  /


    $('.context-menu-one').on('click', function(e){
      console.log('clicked', this);
    })
  }); */

  // salva il contenuto di tutti gli editor inline
  function pageSave() {

    for (instance in CKEDITOR.instances) {
      var editor = CKEDITOR.instances[instance]; // CKEDITOR.instances.editor1;
      var data = editor.getData();
      var id = editor.name.substr(6);

      // remember to use encodeURIComponent to properly encode the data that is being sent.
      // document.getElementById( 'editorcontent2' ).innerHTML = data;

      // Send contents to server
      $.ajax({
        url: '/columns/' + id + '/editor_update',
        type: 'POST',
        data: {
          contenuto: data,
          authenticity_token: '<%= form_authenticity_token %>'
        },
        // success: function (response) {
        //   alert("La pagina è stata salvata.");
        // }
      });
    }

    document.getElementById( 'notice' ).innerHTML = 'La pagina &egrave; stata salvata.';
    return false;

  }

  function pagePreview() {
    // disabilita gli editor inline
    for (instance in CKEDITOR.instances) {
      var editor = CKEDITOR.instances[instance];

      if(editor) {
        editor.destroy();
        elemento = document.getElementById(editor.name)

        elemento.setAttribute('contenteditable', false);
      }
    }

    // disabilita i menù contestuali
    $('.row').each(function () {
      var $this = $(this);
      $this.contextMenu(false);
    });

    $('.toolbar').attr('class','toolbar button');
    $('#pagePreview').attr('class','toolbar warning button');
  }

  function inlineEdit() {
    // abilita gli editor inline
    $('.columns').attr('contenteditable', true);
    $('.columns').each(function() {
      CKEDITOR.inline(this);
    });

    // disabilita i menù contestuali
    $('.row').each(function () {
      var $this = $(this);
      $this.contextMenu(false);
    });

    $('.toolbar').attr('class','toolbar button');
    $('#inlineEdit').attr('class','toolbar warning button');
  }

  function layoutDesign() {
    // disabilita gli editor inline
    for (instance in CKEDITOR.instances) {
      var editor = CKEDITOR.instances[instance];

      editor.destroy();
      elemento = document.getElementById( editor.name )

      elemento.setAttribute( 'contenteditable', false );
    }

    // abilita i menù contestuali
    $('.row').each(function () {
      var $this = $(this);
      $this.contextMenu(true);
    });

    $('.toolbar').attr('class','toolbar button');
    $('#layoutDesign').attr('class','toolbar warning button');
  }
</script>